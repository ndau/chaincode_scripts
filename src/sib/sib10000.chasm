;  ----- ---- --- -- -
;  Copyright 2019, 2020 The Axiom Foundation. All Rights Reserved.
; 
;  Licensed under the Apache License 2.0 (the "License").  You may not use
;  this file except in compliance with the License.  You can obtain a copy
;  in the file LICENSE in the source distribution or at
;  https://www.apache.org/licenses/LICENSE-2.0.txt
;  - -- --- ---- -----


; SIB calculation
;
; Stabilization Incentive Burn disincentivizes ndau sales when the market
; price is below the target price. It does so by assuming that all transfers
; within that period are sales, and adds extra fees to the seller. How much
; fee? That's the point of this script.
;
; Expected stack at input:
;
;   TARGET PRICE (top)
;   MARKET PRICE
;    FLOOR PRICE
;
; These prices must be integers expressed with sufficient precision to accurately
; determine proportionality. Expressing them as cents is sufficient precision
; if the prices are denominated in dollars.
;
; Expected output:
;
;   RATE (int): a number which when divided by constants.RateDenominator
;               results in a multiplier. This value will be multiplied by
;               the tx qty and divided by constants.RateDenominator to
;               produce the actual qty of SIB for that tx.
;
; Temporary BPC action to prevent movement to exchanges during voting
;
; SIB = 1,000% at all times.

; don't change this
RATE_DENOMINATOR = 1_000_000_000_000    ; 10^12 = 100%

TENTHOUSAND_PERCENT = 100_000_000_000_000

handler EVENT_DEFAULT {
    ; Don't bother with what's on the stack - just push the answer and return
    
                                    ; floor market target
    push TENTHOUSAND_PERCENT        ; floor market target TENTHOUSAND_PERCENT

    ;; just fall off the end here; we have the rate we want
}
