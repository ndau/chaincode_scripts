;  ----- ---- --- -- -
;  Copyright 2019, 2020 The Axiom Foundation. All Rights Reserved.
; 
;  Licensed under the Apache License 2.0 (the "License").  You may not use
;  this file except in compliance with the License.  You can obtain a copy
;  in the file LICENSE in the source distribution or at
;  https://www.apache.org/licenses/LICENSE-2.0.txt
;  - -- --- ---- -----


; this is a node operations distribution script that keeps a percentage of
; the node reward for itself and distributes the rest equally among all
; co-stake events (i.e. one for each time an account has submitted a Stake
; transaction to this node) regardless of the amount staked.

; stack:
;  (top) costakers (list of structs of account data decorated with address)
;        totalAward
;        node (account data decorated with address)

; returns:
;	     list of structs,
;               field 1 is the address
;               field 10 is the amount returned

; anything remaining after the return list is sent to the node's account
; if the return list is > the amount available, only the amount available
; is distributed -- everyone else gets 0.

; this is the percentage of the total reward that should go to the node.
; the remainder is divided into equal parts and that amount is given to
; each co-staker.

KEEP_PCT = 60
ALLOCATE_FIELD = 10

handler EVENT_DEFAULT {
                                    ; node total costakers
    swap                            ; node costakers total
    push KEEP_PCT                   ; node costakers total keep
    push 100                        ; node costakers total keep 100
    muldiv                          ; node costakers ( total * (keep / 100 ) )
    over                            ; node costakers total_distribution_amt costakers
    len                             ; node costakers total_distribution_amt ncostakers
    swap                            ; node costakers ncostakers total_distribution_amt
    div                             ; node costakers per_costaker
    swap                            ; node per_costaker costakers
    deco PER_ACCT ALLOCATE_FIELD
                                    ; node decorated_costakers
                                    ; we're done
}

func PER_ACCT(1) {
                                    ; incoming stack:   ; costaker per_costaker
    drop                            ; just leave the amount on the stack
}
